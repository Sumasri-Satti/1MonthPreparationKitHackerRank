1.Between Two Set

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;



class Result {

    /*
     * Complete the 'getTotalX' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY a
     *  2. INTEGER_ARRAY b
     */
    
    public static int getTotalX(List<Integer> a, List<Integer> b) {
    // Write your code here
        List<Integer> fact=new ArrayList<>();
        int min=Collections.min(b,null),c=0;
        for(int i=1;i<=min;i++){
            int f=0;
            for(int j:b){
                if(j%i!=0){
                    f=1;
                    break;
                }
            }
            if(f==0)
                fact.add(i);
        }
        
        for(int j:fact){
            int f=0;
            for(int i: a){
                if(j%i!=0){
                    f=1;
                    break;
                }
            }
            if(f==0)
                c++;
        }
        return c;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int n = Integer.parseInt(firstMultipleInput[0]);

        int m = Integer.parseInt(firstMultipleInput[1]);

        List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        List<Integer> brr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        int total = Result.getTotalX(arr, brr);

        bufferedWriter.write(String.valueOf(total));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}

_________________________________________________________________________________________________________________________________________________________

2.Palindrome Index

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;


class Result {

    /*
     * Complete the 'palindromeIndex' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts STRING s as parameter.
     */
     
    public static int isPalindrome(String s){
        //This method is used to return the index where mismatch occurs.It returns -1 for a palindrome
        int n=s.length();
        for(int i=0;i<=n/2;i++){
            if(s.charAt(i)!=s.charAt(n-1-i)){
                return i;
            }
        }
        return -1;
    }
    
    public static int palindromeIndex(String s) {
    // Write your code here
        if(isPalindrome(s)==-1)
            return -1;
        int ind=isPalindrome(s),n=s.length();
        
        if(isPalindrome(s.substring(0,ind)+s.substring(ind+1))==-1)
            return ind;
        if(isPalindrome(s.substring(0,n-ind-1)+s.substring(n-ind))==-1)
            return n-ind-1;
        return -1;
        
    }

}
public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, q).forEach(qItr -> {
            try {
                String s = bufferedReader.readLine();

                int result = Result.palindromeIndex(s);

                bufferedWriter.write(String.valueOf(result));
                bufferedWriter.newLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}

________________________________________________________________________________________________________________________________________________________

3.Anagram

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;



class Result {

    /*
     * Complete the 'anagram' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts STRING s as parameter.
     */

    public static int anagram(String s) {
    // Write your code here
        if(s.length()%2!=0)
            return -1;
            
        int n=s.length()/2,c=0;
        String s1=s.substring(0,n);
        String s2=s.substring(n);
        int freq1[]=new int[26];
        int freq2[]=new int[26];
        
        for(int i=0;i<n;i++)
            freq1[s1.charAt(i)-'a']+=1;
            
        for(int i=0;i<n;i++)
            freq2[s2.charAt(i)-'a']+=1;   
            
        for(int i=0;i<26;i++)
            c+=Math.abs(freq1[i]-freq2[i]);
            
        return c/2;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, q).forEach(qItr -> {
            try {
                String s = bufferedReader.readLine();

                int result = Result.anagram(s);

                bufferedWriter.write(String.valueOf(result));
                bufferedWriter.newLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
